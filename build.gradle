plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
    id 'jacoco'
    id "org.sonarqube" version "3.4.0.2513"
}

group = 'com.anthony'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/reports/jacocoHtml")
    }
    dependsOn test // tests are required to run before generating the report
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        includes= ["com.anthony.*"]
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.login", "5f542370ca13ec8a9ca37048d7f32809c01681c0"
        property "sonar.exclusions", "**/*StoreApplication.java"
        property "sonar.qualitygate.wait", true
        property "sonar.verbose", true
    }
}
/*
sonarqube {
    properties {
        property "sonar.coverage.jacoco.xmlReportPath", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.junit.reportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.verbose", true
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test"

        property "sonar.host.url", "http://localhost:9000"
        property "sonar.projectName", project.name
        property "sonar.projectKey", "$project.group:$project.name"
        property "sonar.projectVersion", project.version
        property "sonar.login", "5f542370ca13ec8a9ca37048d7f32809c01681c0"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.qualitygate.wait", true
        property "sonar.language", java
        property "sonar.java.binaries", "build/classes"
        property "sonar.java.libraries", "build/classes"

    }
}*/

tasks.named('sonarqube').configure {
    dependsOn test
}

repositories {
	mavenCentral()
}

dependencies {
    //	<!-- Setup Spring Boot -->
    implementation 'org.springframework.boot:spring-boot-starter-web'
    //	<!-- Validation for Request -->
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    //	<!-- JPA Data (Repositories, Entities, Hibernate, etc..) -->
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    //  <!-- Starter for using Spring Security -->
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
	//  <!-- Database embedded -->
    implementation group: 'com.h2database', name: 'h2'
	//  <!-- Start for international I18n  -->
    implementation group: 'org.apache.commons', name: 'commons-lang3'
	implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
	// 	<!-- This annotation is for get, setter, constructor  -->
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
	// 	<!-- This annotation is useful for cast Object to Another  -->
	implementation 'org.mapstruct:mapstruct:1.5.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
    // 	<!-- Starter for UnitTest  -->
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '2.7.21'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.10'
	// 	<!-- JSON Web Token Support -->
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'

    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly('io.jsonwebtoken:jjwt-orgjson:0.11.5') {
        exclude group: 'org.json', module: 'json' //provided by Android natively
    }
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}
